[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pinnacle-ai-platform"
version = "0.1.0"
description = "Comprehensive AI platform with 200+ agents, e-commerce functionality, and dropshipping automation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Pinnacle AI Team", email = "team@pinnacle-ai.com"}
]
maintainers = [
    {name = "Pinnacle AI Team", email = "team@pinnacle-ai.com"}
]
keywords = [
    "artificial-intelligence",
    "machine-learning",
    "e-commerce",
    "dropshipping",
    "automation",
    "multi-agent",
    "platform"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: FastAPI",
    "Framework :: Django"
]
requires-python = ">=3.8"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "django>=4.2.7",
    "djangorestframework>=3.14.0",
    "django-cors-headers>=4.3.1",
    "pyjwt>=2.8.0",
    "bcrypt>=4.1.2",
    "python-jose[cryptography]>=3.3.0",
    "psycopg2-binary>=2.9.9",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.1",
    "redis>=5.0.1",
    "pymongo>=4.6.0",
    "torch>=2.1.1",
    "transformers>=4.35.2",
    "scikit-learn>=1.3.2",
    "numpy>=1.24.3",
    "pandas>=2.1.4",
    "requests>=2.31.0",
    "httpx>=0.25.2",
    "celery>=5.3.4",
    "stripe>=7.8.1",
    "boto3>=1.34.34",
    "pytest>=7.4.3",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1"
]

[project.optional-dependencies]
dev = [
    "pytest-asyncio>=0.23.2",
    "pytest-cov>=4.1.0",
    "pytest-django>=4.7.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.26.0",
    "notebook>=7.0.6",
    "pre-commit>=3.6.0",
    "bandit>=1.7.5"
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=1.3.0"
]
ml = [
    "torchvision>=0.16.1",
    "torchaudio>=2.1.1",
    "tokenizers>=0.15.0",
    "datasets>=2.15.0",
    "accelerate>=0.24.1",
    "diffusers>=0.24.0",
    "sentence-transformers>=2.2.2",
    "opencv-python>=4.8.1.78",
    "pillow>=10.1.0"
]
ecommerce = [
    "paypalrestsdk>=1.13.3",
    "squareup>=30.0.0",
    "shopify-api-python>=12.4.0"
]
monitoring = [
    "sentry-sdk>=1.38.0",
    "loguru>=0.7.2",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0"
]
all = [
    "pinnacle-ai-platform[dev,docs,ml,ecommerce,monitoring]"
]

[project.urls]
Homepage = "https://github.com/your-username/pinnacle-ai-platform"
Documentation = "https://pinnacle-ai-platform.readthedocs.io/"
Repository = "https://github.com/your-username/pinnacle-ai-platform"
Issues = "https://github.com/your-username/pinnacle-ai-platform/issues"
Changelog = "https://github.com/your-username/pinnacle-ai-platform/blob/main/CHANGELOG.md"

[project.scripts]
pinnacle-ai = "pinnacle_ai.cli:main"
pinnacle-manage = "manage:main"

[tool.setuptools]
packages = ["pinnacle_ai", "pinnacle_ai.core", "pinnacle_ai.services", "pinnacle_ai.api"]

[tool.setuptools.package-data]
pinnacle_ai = ["*.txt", "*.md", "*.yaml", "*.yml", "*.json"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pinnacle_ai"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "cv2.*",
    "PIL.*",
    "boto3.*",
    "botocore.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "src/*/migrations/*",
    "src/manage.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod"
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_subprocess

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]  # assert false

[tool.pre-commit.hooks.black]
language_version = "python3"

[tool.pre-commit.hooks.isort]
language_version = "python3"

[tool.pre-commit.hooks.flake8]
language_version = "python3"

[tool.pre-commit.hooks.mypy]
language_version = "python3"