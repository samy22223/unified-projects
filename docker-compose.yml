services:
  # ============================================================================
  # DATABASES
  # ============================================================================

  postgresql:
    image: postgres:15-alpine
    container_name: omnicore_postgresql
    restart: unless-stopped
    environment:
      POSTGRES_DB: omnicore
      POSTGRES_USER: omnicore
      POSTGRES_PASSWORD: omnicore_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - omnicore_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U omnicore -d omnicore"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:8.0
    container_name: omnicore_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: omnicore_password
      MONGO_INITDB_DATABASE: omnicore
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - omnicore_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  mysql:
    image: mysql:8.0
    container_name: omnicore_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: omnicore_password
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - omnicore_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: omnicore_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - omnicore_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  neo4j:
    image: neo4j:5.15
    container_name: omnicore_neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/omnicore_password
      NEO4J_PLUGINS: '["graph-data-science"]'
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - omnicore_network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "omnicore_password", "MATCH () RETURN count(*) limit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  chroma:
    image: chromadb/chroma:latest
    container_name: omnicore_chroma
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - omnicore_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # SECURITY & AUTHENTICATION
  # ============================================================================

  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: omnicore_keycloak
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: omnicore_password
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgresql:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      KC_HOSTNAME: localhost
    ports:
      - "8080:8080"
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - omnicore_network
    command: start-dev

  wazuh:
    image: wazuh/wazuh:4.7.0
    container_name: omnicore_wazuh
    restart: unless-stopped
    ports:
      - "1514:1514"
      - "1515:1515"
      - "514:514"
      - "55000:55000"
    volumes:
      - wazuh_data:/var/ossec/data
      - wazuh_logs:/var/ossec/logs
    networks:
      - omnicore_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:55000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # MONITORING & LOGGING
  # ============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: omnicore_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - omnicore_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: omnicore_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: omnicore_password
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - omnicore_network
    depends_on:
      - prometheus

  loki:
    image: grafana/loki:latest
    container_name: omnicore_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
    networks:
      - omnicore_network
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    container_name: omnicore_promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log
    networks:
      - omnicore_network
    command: -config.file=/etc/promtail/config.yml

  # ============================================================================
  # AUTOMATION & QUEUING
  # ============================================================================

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: omnicore_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: omnicore
      RABBITMQ_DEFAULT_PASS: omnicore_password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - omnicore_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  n8n:
    image: n8nio/n8n:latest
    container_name: omnicore_n8n
    restart: unless-stopped
    environment:
      N8N_BASIC_AUTH_ACTIVE: 'true'
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: omnicore_password
      N8N_HOST: localhost
      N8N_PORT: 5678
      N8N_PROTOCOL: http
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgresql
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: n8n
      DB_POSTGRESDB_PASSWORD: n8n_password
      N8N_ENCRYPTION_KEY: 'your_random_encryption_key_here'
    ports:
      - "5678:5678"
    depends_on:
      postgresql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - omnicore_network

  # ============================================================================
  # AI PLATFORM & DASHBOARD
  # ============================================================================

  pinnacle-ai-platform:
    build:
      context: ./pinnacle-ai-platform
      dockerfile: Dockerfile
    container_name: omnicore_pinnacle_ai
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://omnicore:omnicore_password@postgresql:5432/omnicore
      REDIS_URL: redis://redis:6379
      CHROMA_URL: http://chroma:8000
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: omnicore_password
      RABBITMQ_URL: amqp://omnicore:omnicore_password@rabbitmq:5672
      JWT_SECRET: your_super_secret_jwt_key_change_this_in_production
      OLLAMA_BASE_URL: http://ollama:11434
    ports:
      - "8001:8000"
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./pinnacle-ai-platform:/app
      - /app/__pycache__
    networks:
      - omnicore_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  omnicore-dashboard:
    build:
      context: ./omnicore-dashboard
      dockerfile: Dockerfile
    container_name: omnicore_dashboard
    restart: unless-stopped
    environment:
      REACT_APP_API_BASE_URL: http://pinnacle-ai-platform:8000
      REACT_APP_GRAFANA_URL: http://grafana:3000
      REACT_APP_N8N_URL: http://n8n:5678
    ports:
      - "3002:3000"
    depends_on:
      - pinnacle-ai-platform
      - grafana
      - n8n
    volumes:
      - ./omnicore-dashboard:/app
      - /app/node_modules
    networks:
      - omnicore_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # E-COMMERCE
  # ============================================================================

  wordpress:
    image: wordpress:latest
    container_name: omnicore_wordpress
    restart: unless-stopped
    environment:
      WORDPRESS_DB_HOST: mysql:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress_password
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_TABLE_PREFIX: wp_
    ports:
      - "8081:80"
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - wordpress_data:/var/www/html
      - ./wp-content:/var/www/html/wp-content
    networks:
      - omnicore_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/wp-admin/install.php"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # REVERSE PROXY & SSL
  # ============================================================================

  traefik:
    image: traefik:v2.10
    container_name: omnicore_traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8082:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml
      - traefik_data:/letsencrypt
    networks:
      - omnicore_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$2y$$10$$..."

  # ============================================================================
  # AI MODEL SERVING
  # ============================================================================

  ollama:
    image: ollama/ollama:latest
    container_name: omnicore_ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - omnicore_network
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgresql_data:
  mongodb_data:
  mysql_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  chroma_data:
  wazuh_data:
  wazuh_logs:
  prometheus_data:
  grafana_data:
  loki_data:
  rabbitmq_data:
  n8n_data:
  wordpress_data:
  traefik_data:
  ollama_data:

networks:
  omnicore_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16